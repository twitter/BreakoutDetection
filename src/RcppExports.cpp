// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// EDM_percent
Rcpp::List EDM_percent(const Rcpp::NumericVector& Z, int min_size, double percent, int degree);
RcppExport SEXP BreakoutDetection_EDM_percent(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP percentSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type percent(percentSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(EDM_percent(Z, min_size, percent, degree));
    return rcpp_result_gen;
END_RCPP
}
// EDM_multi
Rcpp::List EDM_multi(const Rcpp::NumericVector& Z, int min_size, double beta, int degree);
RcppExport SEXP BreakoutDetection_EDM_multi(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP betaSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(EDM_multi(Z, min_size, beta, degree));
    return rcpp_result_gen;
END_RCPP
}
// EDM_tail
Rcpp::List EDM_tail(const Rcpp::NumericVector& Z, int min_size, double alpha, double quant);
RcppExport SEXP BreakoutDetection_EDM_tail(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP alphaSEXP, SEXP quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type quant(quantSEXP);
    rcpp_result_gen = Rcpp::wrap(EDM_tail(Z, min_size, alpha, quant));
    return rcpp_result_gen;
END_RCPP
}
// EDMX
Rcpp::List EDMX(const Rcpp::NumericVector& Z, int min_size, double alpha);
RcppExport SEXP BreakoutDetection_EDMX(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(EDMX(Z, min_size, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"BreakoutDetection_EDM_percent", (DL_FUNC) &BreakoutDetection_EDM_percent, 4},
    {"BreakoutDetection_EDM_multi", (DL_FUNC) &BreakoutDetection_EDM_multi, 4},
    {"BreakoutDetection_EDM_tail", (DL_FUNC) &BreakoutDetection_EDM_tail, 4},
    {"BreakoutDetection_EDMX", (DL_FUNC) &BreakoutDetection_EDMX, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BreakoutDetection(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

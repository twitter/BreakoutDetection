# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_breakout_detection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_breakout_detection')
    _breakout_detection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_breakout_detection', [dirname(__file__)])
        except ImportError:
            import _breakout_detection
            return _breakout_detection
        try:
            _mod = imp.load_module('_breakout_detection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _breakout_detection = swig_import_helper()
    del swig_import_helper
else:
    import _breakout_detection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _breakout_detection.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _breakout_detection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _breakout_detection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _breakout_detection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _breakout_detection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _breakout_detection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _breakout_detection.SwigPyIterator_copy(self)

    def next(self):
        return _breakout_detection.SwigPyIterator_next(self)

    def __next__(self):
        return _breakout_detection.SwigPyIterator___next__(self)

    def previous(self):
        return _breakout_detection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _breakout_detection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _breakout_detection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _breakout_detection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _breakout_detection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _breakout_detection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _breakout_detection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _breakout_detection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _breakout_detection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntegerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _breakout_detection.IntegerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _breakout_detection.IntegerVector___nonzero__(self)

    def __bool__(self):
        return _breakout_detection.IntegerVector___bool__(self)

    def __len__(self):
        return _breakout_detection.IntegerVector___len__(self)

    def __getslice__(self, i, j):
        return _breakout_detection.IntegerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _breakout_detection.IntegerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _breakout_detection.IntegerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _breakout_detection.IntegerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _breakout_detection.IntegerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _breakout_detection.IntegerVector___setitem__(self, *args)

    def pop(self):
        return _breakout_detection.IntegerVector_pop(self)

    def append(self, x):
        return _breakout_detection.IntegerVector_append(self, x)

    def empty(self):
        return _breakout_detection.IntegerVector_empty(self)

    def size(self):
        return _breakout_detection.IntegerVector_size(self)

    def swap(self, v):
        return _breakout_detection.IntegerVector_swap(self, v)

    def begin(self):
        return _breakout_detection.IntegerVector_begin(self)

    def end(self):
        return _breakout_detection.IntegerVector_end(self)

    def rbegin(self):
        return _breakout_detection.IntegerVector_rbegin(self)

    def rend(self):
        return _breakout_detection.IntegerVector_rend(self)

    def clear(self):
        return _breakout_detection.IntegerVector_clear(self)

    def get_allocator(self):
        return _breakout_detection.IntegerVector_get_allocator(self)

    def pop_back(self):
        return _breakout_detection.IntegerVector_pop_back(self)

    def erase(self, *args):
        return _breakout_detection.IntegerVector_erase(self, *args)

    def __init__(self, *args):
        this = _breakout_detection.new_IntegerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _breakout_detection.IntegerVector_push_back(self, x)

    def front(self):
        return _breakout_detection.IntegerVector_front(self)

    def back(self):
        return _breakout_detection.IntegerVector_back(self)

    def assign(self, n, x):
        return _breakout_detection.IntegerVector_assign(self, n, x)

    def resize(self, *args):
        return _breakout_detection.IntegerVector_resize(self, *args)

    def insert(self, *args):
        return _breakout_detection.IntegerVector_insert(self, *args)

    def reserve(self, n):
        return _breakout_detection.IntegerVector_reserve(self, n)

    def capacity(self):
        return _breakout_detection.IntegerVector_capacity(self)
    __swig_destroy__ = _breakout_detection.delete_IntegerVector
    __del__ = lambda self: None
IntegerVector_swigregister = _breakout_detection.IntegerVector_swigregister
IntegerVector_swigregister(IntegerVector)

class NumericVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumericVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _breakout_detection.NumericVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _breakout_detection.NumericVector___nonzero__(self)

    def __bool__(self):
        return _breakout_detection.NumericVector___bool__(self)

    def __len__(self):
        return _breakout_detection.NumericVector___len__(self)

    def __getslice__(self, i, j):
        return _breakout_detection.NumericVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _breakout_detection.NumericVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _breakout_detection.NumericVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _breakout_detection.NumericVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _breakout_detection.NumericVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _breakout_detection.NumericVector___setitem__(self, *args)

    def pop(self):
        return _breakout_detection.NumericVector_pop(self)

    def append(self, x):
        return _breakout_detection.NumericVector_append(self, x)

    def empty(self):
        return _breakout_detection.NumericVector_empty(self)

    def size(self):
        return _breakout_detection.NumericVector_size(self)

    def swap(self, v):
        return _breakout_detection.NumericVector_swap(self, v)

    def begin(self):
        return _breakout_detection.NumericVector_begin(self)

    def end(self):
        return _breakout_detection.NumericVector_end(self)

    def rbegin(self):
        return _breakout_detection.NumericVector_rbegin(self)

    def rend(self):
        return _breakout_detection.NumericVector_rend(self)

    def clear(self):
        return _breakout_detection.NumericVector_clear(self)

    def get_allocator(self):
        return _breakout_detection.NumericVector_get_allocator(self)

    def pop_back(self):
        return _breakout_detection.NumericVector_pop_back(self)

    def erase(self, *args):
        return _breakout_detection.NumericVector_erase(self, *args)

    def __init__(self, *args):
        this = _breakout_detection.new_NumericVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _breakout_detection.NumericVector_push_back(self, x)

    def front(self):
        return _breakout_detection.NumericVector_front(self)

    def back(self):
        return _breakout_detection.NumericVector_back(self)

    def assign(self, n, x):
        return _breakout_detection.NumericVector_assign(self, n, x)

    def resize(self, *args):
        return _breakout_detection.NumericVector_resize(self, *args)

    def insert(self, *args):
        return _breakout_detection.NumericVector_insert(self, *args)

    def reserve(self, n):
        return _breakout_detection.NumericVector_reserve(self, n)

    def capacity(self):
        return _breakout_detection.NumericVector_capacity(self)
    __swig_destroy__ = _breakout_detection.delete_NumericVector
    __del__ = lambda self: None
NumericVector_swigregister = _breakout_detection.NumericVector_swigregister
NumericVector_swigregister(NumericVector)

class EdmPer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdmPer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdmPer, name)
    __repr__ = _swig_repr

    def evaluate(self, Z, min_size=24, percent=0, degree=0):
        return _breakout_detection.EdmPer_evaluate(self, Z, min_size, percent, degree)

    def getLoc(self):
        return _breakout_detection.EdmPer_getLoc(self)

    def getF(self):
        return _breakout_detection.EdmPer_getF(self)

    def getNumber(self):
        return _breakout_detection.EdmPer_getNumber(self)

    def getPrev(self):
        return _breakout_detection.EdmPer_getPrev(self)

    def __init__(self):
        this = _breakout_detection.new_EdmPer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _breakout_detection.delete_EdmPer
    __del__ = lambda self: None
EdmPer_swigregister = _breakout_detection.EdmPer_swigregister
EdmPer_swigregister(EdmPer)

class EdmMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdmMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdmMulti, name)
    __repr__ = _swig_repr

    def evaluate(self, Z, min_size=24, beta=0, degree=0):
        return _breakout_detection.EdmMulti_evaluate(self, Z, min_size, beta, degree)

    def getLoc(self):
        return _breakout_detection.EdmMulti_getLoc(self)

    def getF(self):
        return _breakout_detection.EdmMulti_getF(self)

    def getNumber(self):
        return _breakout_detection.EdmMulti_getNumber(self)

    def getPrev(self):
        return _breakout_detection.EdmMulti_getPrev(self)

    def __init__(self):
        this = _breakout_detection.new_EdmMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _breakout_detection.delete_EdmMulti
    __del__ = lambda self: None
EdmMulti_swigregister = _breakout_detection.EdmMulti_swigregister
EdmMulti_swigregister(EdmMulti)

class EdmTail(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdmTail, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdmTail, name)
    __repr__ = _swig_repr

    def evaluate(self, Z, min_size=24, alpha=2, quant=0.5):
        return _breakout_detection.EdmTail_evaluate(self, Z, min_size, alpha, quant)

    def getLoc(self):
        return _breakout_detection.EdmTail_getLoc(self)

    def getTail(self):
        return _breakout_detection.EdmTail_getTail(self)

    def getStat(self):
        return _breakout_detection.EdmTail_getStat(self)

    def __init__(self):
        this = _breakout_detection.new_EdmTail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _breakout_detection.delete_EdmTail
    __del__ = lambda self: None
EdmTail_swigregister = _breakout_detection.EdmTail_swigregister
EdmTail_swigregister(EdmTail)

class Edmx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edmx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edmx, name)
    __repr__ = _swig_repr

    def evaluate(self, Z, min_size=24, alpha=2):
        return _breakout_detection.Edmx_evaluate(self, Z, min_size, alpha)

    def getLoc(self):
        return _breakout_detection.Edmx_getLoc(self)

    def getTail(self):
        return _breakout_detection.Edmx_getTail(self)

    def getStat(self):
        return _breakout_detection.Edmx_getStat(self)

    def __init__(self):
        this = _breakout_detection.new_Edmx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _breakout_detection.delete_Edmx
    __del__ = lambda self: None
Edmx_swigregister = _breakout_detection.Edmx_swigregister
Edmx_swigregister(Edmx)

# This file is compatible with both classic and new-style classes.


